structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp of A.exp | exps of (A.exp * A.pos) list | program of A.exp | decs of A.dec list | dec of A.dec

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program:  exp                               (exp)

exp:      LET decs IN exp END               (A.LetExp {decs=decs, body=exp, pos=LETleft})     
	
exp:      NIL		                            (A.NilExp)
exp:      INT                               (A.IntExp(INT))
exp:      ID                                (A.VarExp (A.SimpleVar(Symbol.symbol ID, IDleft)))

exp:      LPAREN exps RPAREN                (A.SeqExp exps)
exps:     exp                               ((exp, expleft) :: nil)
exps:     exp SEMICOLON exps                ((exp, expleft) :: exps)

decs:     dec                               (dec :: nil)

dec:      VAR ID ASSIGN exp                 (A.VarDec {name=(Symbol.symbol ID), escape=(ref false), typ=NONE, init=exp, pos=VARleft})