
C:\Users\willi\Desktop\553\553-compiler\absynt>REM sml.bat 

C:\Users\willi\Desktop\553\553-compiler\absynt>REM

C:\Users\willi\Desktop\553\553-compiler\absynt>REM Copyright 2020 The Fellowship of SML/NJ (http://www.smlnj.org) 

C:\Users\willi\Desktop\553\553-compiler\absynt>REM All rights reserved. 

C:\Users\willi\Desktop\553\553-compiler\absynt>REM

C:\Users\willi\Desktop\553\553-compiler\absynt>REM The standard driver for SML/NJ under the new runtime system 

C:\Users\willi\Desktop\553\553-compiler\absynt>REM
Standard ML of New Jersey (32-bit) v110.99.3 [built: Thu Jul 28 00:45:02 2022]
[opening autotest.sml]
[autoloading]
[library $smlnj/cm/cm.cm is stable]
[library $smlnj/internal/cm-sig-lib.cm is stable]
[library $/pgraph.cm is stable]
[library $smlnj/internal/srcpath-lib.cm is stable]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
[scanning sources.cm]
[library $/ml-yacc-lib.cm is stable]
[attempting to load plugin $/lex-ext.cm]
[library $/lex-ext.cm is stable]
[library $smlnj/cm/tools.cm is stable]
[library $smlnj/internal/cm-lib.cm is stable]
[plugin $/lex-ext.cm loaded successfully]
[attempting to load plugin $/mllex-tool.cm]
[library $/mllex-tool.cm is stable]
[plugin $/mllex-tool.cm loaded successfully]
[attempting to load plugin $/grm-ext.cm]
[library $/grm-ext.cm is stable]
[plugin $/grm-ext.cm loaded successfully]
[attempting to load plugin $/mlyacc-tool.cm]
[library $/mlyacc-tool.cm is stable]
[plugin $/mlyacc-tool.cm loaded successfully]
["ml-yacc"  "tiger.grm"]
1 shift/reduce conflict
[parsing (sources.cm):tiger.grm.sig]
[parsing (sources.cm):tiger.grm.sml]
[library $SMLNJ-LIB/Util/smlnj-lib.cm is stable]
[library $SMLNJ-ML-YACC-LIB/ml-yacc-lib.cm is stable]
[loading (sources.cm):table.sig]
[loading (sources.cm):table.sml]
[loading (sources.cm):symbol.sml]
[loading (sources.cm):absyn.sml]
[loading (sources.cm):errormsg.sml]
[compiling (sources.cm):tiger.grm.sig]
[code: 56, env: 1057 bytes]
[loading (sources.cm):prabsyn.sml]
[compiling (sources.cm):tiger.grm.sml]
[code: 65006, data: 7698, env: 2009 bytes]
[loading (sources.cm):tiger.lex.sml]
[compiling (sources.cm):parse.sml]
[code: 5875, data: 115, env: 126 bytes]
[New bindings added.]
val it = true : bool
[autoloading]
[autoloading done]
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,false,string),
    (id,false,int)])],
 VarDec(a,false,NONE,
  RecordExp(rectype,[
]))],
 SeqExp[
  VarExp(
   SimpleVar(a))])
LetExp([
 FunctionDec[
  (g,[
   (a,false,int)],
SOME(int),
   VarExp(
    SimpleVar(a)))],
 TypeDec[
  (t,
   NameTy(int))],
 FunctionDec[
  (g,[
   (a,false,int)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  IntExp(0)])
LetExp([
 TypeDec[
  (a,
   NameTy(int))],
 VarDec(b,false,NONE,
  IntExp(4)),
 TypeDec[
  (a,
   NameTy(string))]],
 SeqExp[
  IntExp(0)])
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,false,string),
    (id,false,int)])],
 VarDec(b,false,SOME(rectype),
  NilExp)],
 SeqExp[
  OpExp(EqOp,
   VarExp(
    SimpleVar(b)),
   NilExp),
  OpExp(NeqOp,
   VarExp(
    SimpleVar(b)),
   NilExp)])
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,false,string),
    (id,false,int)])],
 VarDec(a,false,NONE,
  NilExp)],
 SeqExp[
  VarExp(
   SimpleVar(a))])
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,false,string),
    (id,false,int)])],
 VarDec(b,false,SOME(rectype),
  NilExp)],
 SeqExp[
  AssignExp(
   SimpleVar(b),
   NilExp)])
LetExp([
 VarDec(a,false,NONE,
  SeqExp[])],
 SeqExp[
  OpExp(PlusOp,
   VarExp(
    SimpleVar(a)),
   IntExp(3))])
LetExp([
 TypeDec[
  (arrtype1,
   ArrayTy(int)),
  (rectype1,
   RecordTy[
    (name,false,string),
    (address,false,string),
    (id,false,int),
    (age,false,int)]),
  (arrtype2,
   ArrayTy(rectype1)),
  (rectype2,
   RecordTy[
    (name,false,string),
    (dates,false,arrtype1)]),
  (arrtype3,
   ArrayTy(string))],
 VarDec(arr1,false,NONE,
  ArrayExp(arrtype1,
   IntExp(10),
   IntExp(0))),
 VarDec(arr2,false,NONE,
  ArrayExp(arrtype2,
   IntExp(5),
   RecordExp(rectype1,[

    (name,
     StringExp("aname")),
    (address,
     StringExp("somewhere")),
    (id,
     IntExp(0)),
    (age,
     IntExp(0))]))),
 VarDec(arr3,false,SOME(arrtype3),
  ArrayExp(arrtype3,
   IntExp(100),
   StringExp(""))),
 VarDec(rec1,false,NONE,
  RecordExp(rectype1,[

   (name,
    StringExp("Kapoios")),
   (address,
    StringExp("Kapou")),
   (id,
    IntExp(2432)),
   (age,
    IntExp(44))])),
 VarDec(rec2,false,NONE,
  RecordExp(rectype2,[

   (name,
    StringExp("Allos")),
   (dates,
    ArrayExp(arrtype1,
     IntExp(3),
     IntExp(1900)))]))],
 SeqExp[
  AssignExp(
   SubscriptVar(
    SimpleVar(arr1),
    IntExp(0)),
   IntExp(1)),
  AssignExp(
   SubscriptVar(
    SimpleVar(arr1),
    IntExp(9)),
   IntExp(3)),
  AssignExp(
   FieldVar(
    SubscriptVar(
     SimpleVar(arr2),
     IntExp(3)),
    name),
   StringExp("kati")),
  AssignExp(
   FieldVar(
    SubscriptVar(
     SimpleVar(arr2),
     IntExp(1)),
    age),
   IntExp(23)),
  AssignExp(
   SubscriptVar(
    SimpleVar(arr3),
    IntExp(34)),
   StringExp("sfd")),
  AssignExp(
   FieldVar(
    SimpleVar(rec1),
    name),
   StringExp("sdf")),
  AssignExp(
   SubscriptVar(
    FieldVar(
     SimpleVar(rec2),
     dates),
    IntExp(0)),
   IntExp(2323)),
  AssignExp(
   SubscriptVar(
    FieldVar(
     SimpleVar(rec2),
     dates),
    IntExp(2)),
   IntExp(2323))])
LetExp([
 TypeDec[
  (a,
   NameTy(int))]],
 SeqExp[
  LetExp([
   TypeDec[
    (a,
     NameTy(string))]],
   SeqExp[
    IntExp(0)])])
LetExp([
 FunctionDec[
  (g,[
   (a,false,int)],
NONE,
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  CallExp(g,[
   IntExp(2)])])
LetExp([
 FunctionDec[
  (g,[
   (a,false,int)],
SOME(int),
   VarExp(
    SimpleVar(a))),
  (g,[
   (a,false,int)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  IntExp(0)])
LetExp([
 TypeDec[
  (a,
   NameTy(int)),
  (a,
   NameTy(string))]],
 SeqExp[
  IntExp(0)])
LetExp([
 VarDec(a,false,NONE,
  IntExp(0)),
 VarDec(a,false,NONE,
  StringExp(" "))],
 SeqExp[
  IntExp(0)])
LetExp([
 FunctionDec[
  (g,[
   (a,false,int),
   (b,false,string)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  CallExp(g,[
   IntExp(3),
   StringExp("one"),
   IntExp(5)])])
LetExp([
 FunctionDec[
  (g,[
   (a,false,int),
   (b,false,string)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  CallExp(g,[
   StringExp("one")])])
LetExp([
 FunctionDec[
  (g,[
   (a,false,int),
   (b,false,string)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  CallExp(g,[
   StringExp("one"),
   StringExp("two")])])
LetExp([
 VarDec(a,false,NONE,
  RecordExp(rectype,[
]))],
 SeqExp[
  IntExp(0)])
LetExp([
 TypeDec[
  (arrayty,
   ArrayTy(int))],
 VarDec(a,false,NONE,
  ArrayExp(arrayty,
   IntExp(10),
   StringExp(" ")))],
 SeqExp[
  IntExp(0)])
LetExp([
 VarDec(a,false,SOME(int),
  StringExp(" "))],
 SeqExp[
  VarExp(
   SimpleVar(a))])
LetExp([
 TypeDec[
  (a,
   ArrayTy(int)),
  (b,
   NameTy(a))],
 VarDec(arr1,false,SOME(a),
  ArrayExp(b,
   IntExp(10),
   IntExp(0)))],
 SeqExp[
  VarExp(
   SubscriptVar(
    SimpleVar(arr1),
    IntExp(2)))])
LetExp([
 TypeDec[
  (arrtype1,
   ArrayTy(int)),
  (arrtype2,
   ArrayTy(int))],
 VarDec(arr1,false,SOME(arrtype1),
  ArrayExp(arrtype2,
   IntExp(10),
   IntExp(0)))],
 SeqExp[
  VarExp(
   SimpleVar(arr1))])
LetExp([
 TypeDec[
  (rectype1,
   RecordTy[
    (name,false,string),
    (id,false,int)]),
  (rectype2,
   RecordTy[
    (name,false,string),
    (id,false,int)])],
 VarDec(rec1,false,SOME(rectype1),
  RecordExp(rectype2,[

   (name,
    StringExp("Name")),
   (id,
    IntExp(0))]))],
 SeqExp[
  VarExp(
   SimpleVar(rec1))])
LetExp([
 VarDec(a,false,NONE,
  IntExp(0)),
 FunctionDec[
  (g,[
   (a,false,int)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  CallExp(g,[
   IntExp(2)])])
OpExp(PlusOp,
 IntExp(3),
 StringExp("var"))
LetExp([
 VarDec(d,false,NONE,
  IntExp(0))],
 SeqExp[
  VarExp(
   FieldVar(
    SimpleVar(d),
    f))])
LetExp([
 VarDec(d,false,NONE,
  IntExp(0))],
 SeqExp[
  VarExp(
   SubscriptVar(
    SimpleVar(d),
    IntExp(3)))])
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,false,string),
    (id,false,int)])],
 VarDec(rec1,false,NONE,
  RecordExp(rectype,[

   (name,
    StringExp("aname")),
   (id,
    IntExp(0))]))],
 SeqExp[
  AssignExp(
   FieldVar(
    SimpleVar(rec1),
    name),
   IntExp(3)),
  AssignExp(
   FieldVar(
    SimpleVar(rec1),
    id),
   StringExp(""))])
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,false,string),
    (id,false,int)])],
 VarDec(rec1,false,NONE,
  RecordExp(rectype,[

   (name,
    StringExp("Name")),
   (id,
    IntExp(0))]))],
 SeqExp[
  AssignExp(
   FieldVar(
    SimpleVar(rec1),
    nam),
   StringExp("asd"))])
LetExp([
 FunctionDec[
  (nfactor,[
   (n,false,int)],
NONE,
   IfExp(
    OpExp(EqOp,
     VarExp(
      SimpleVar(n)),
     IntExp(0)),
    IntExp(1),
    OpExp(TimesOp,
     VarExp(
      SimpleVar(n)),
     CallExp(nfactor,[
      OpExp(MinusOp,
       VarExp(
        SimpleVar(n)),
       IntExp(1))]))))]],
 SeqExp[
  CallExp(nfactor,[
   IntExp(10)])])
WhileExp(
 OpExp(GtOp,
  IntExp(10),
  IntExp(5)),
 SeqExp[
  OpExp(PlusOp,
   VarExp(
    SimpleVar(i)),
   IntExp(1)),
  SeqExp[]])
LetExp([
 FunctionDec[
  (do_nothing1,[
   (a,false,int),
   (b,false,string)],
SOME(int),
   SeqExp[
    CallExp(do_nothing2,[
     OpExp(PlusOp,
      VarExp(
       SimpleVar(a)),
      IntExp(1))]),
    IntExp(0)]),
  (do_nothing2,[
   (d,false,int)],
SOME(string),
   SeqExp[
    CallExp(do_nothing1,[
     VarExp(
      SimpleVar(a)),
     StringExp("str")]),
    StringExp(" ")])]],
 SeqExp[
  CallExp(do_nothing1,[
   IntExp(0),
   StringExp("str2")])])
LetExp([
 FunctionDec[
  (do_nothing1,[
   (a,false,int),
   (b,false,string)],
SOME(int),
   SeqExp[
    CallExp(do_nothing2,[
     OpExp(PlusOp,
      VarExp(
       SimpleVar(a)),
      IntExp(1))]),
    IntExp(0)])],
 VarDec(d,false,NONE,
  IntExp(0)),
 FunctionDec[
  (do_nothing2,[
   (d,false,int)],
SOME(string),
   SeqExp[
    CallExp(do_nothing1,[
     VarExp(
      SimpleVar(d)),
     StringExp("str")]),
    StringExp(" ")])]],
 SeqExp[
  CallExp(do_nothing1,[
   IntExp(0),
   StringExp("str2")])])
LetExp([
 TypeDec[
  (tree,
   RecordTy[
    (key,false,int),
    (children,false,treelist)])],
 VarDec(d,false,SOME(int),
  IntExp(0)),
 TypeDec[
  (treelist,
   RecordTy[
    (hd,false,tree),
    (tl,false,treelist)])]],
 SeqExp[
  VarExp(
   SimpleVar(d))])
LetExp([
 TypeDec[
  (a,
   NameTy(c)),
  (b,
   NameTy(a)),
  (c,
   NameTy(d)),
  (d,
   NameTy(a))]],
 SeqExp[
  StringExp("")])
IfExp(
 IntExp(20),
 IntExp(3))
LetExp([
 TypeDec[
  (arrtype,
   ArrayTy(int)),
  (rectype,
   RecordTy[
    (name,false,string),
    (id,false,int)])],
 VarDec(rec,false,NONE,
  RecordExp(rectype,[

   (name,
    StringExp("aname")),
   (id,
    IntExp(0))])),
 VarDec(arr,false,NONE,
  ArrayExp(arrtype,
   IntExp(3),
   IntExp(0)))],
 SeqExp[
  IfExp(
   OpExp(NeqOp,
    VarExp(
     SimpleVar(rec)),
    VarExp(
     SimpleVar(arr))),
   IntExp(3),
   IntExp(4))])
OpExp(GtOp,
 IntExp(3),
 StringExp("df"))
LetExp([
 VarDec(a,false,NONE,
  IntExp(0))],
 SeqExp[
  ForExp(
i,false,
   IntExp(0),
   IntExp(100),
   SeqExp[
    AssignExp(
     SimpleVar(a),
     OpExp(PlusOp,
      VarExp(
       SimpleVar(a)),
      IntExp(1))),
    SeqExp[]])])
ForExp(
i,false,
 IntExp(10),
 StringExp(" "),
 AssignExp(
  SimpleVar(i),
  OpExp(MinusOp,
   VarExp(
    SimpleVar(i)),
   IntExp(1))))
WhileExp(
 SeqExp[
  OpExp(GtOp,
   IntExp(10),
   IntExp(5))],
 OpExp(PlusOp,
  IntExp(5),
  IntExp(6)))
IfExp(
 SeqExp[
  OpExp(GtOp,
   IntExp(5),
   IntExp(4))],
 IntExp(13),
 StringExp(" "))
IfExp(
 SeqExp[
  OpExp(GtOp,
   IntExp(10),
   IntExp(20))],
 IntExp(30),
 IntExp(40))
LetExp([
 FunctionDec[
  (do_nothing1,[
   (a,false,int),
   (b,false,string)],
SOME(int),
   SeqExp[
    CallExp(do_nothing2,[
     OpExp(PlusOp,
      VarExp(
       SimpleVar(a)),
      IntExp(1))]),
    IntExp(0)]),
  (do_nothing2,[
   (d,false,int)],
SOME(string),
   SeqExp[
    CallExp(do_nothing1,[
     VarExp(
      SimpleVar(d)),
     StringExp("str")]),
    StringExp(" ")])]],
 SeqExp[
  CallExp(do_nothing1,[
   IntExp(0),
   StringExp("str2")])])
LetExp([
 FunctionDec[
  (do_nothing1,[
   (a,false,int),
   (b,false,string)],
NONE,
   CallExp(do_nothing2,[
    OpExp(PlusOp,
     VarExp(
      SimpleVar(a)),
     IntExp(1))])),
  (do_nothing2,[
   (d,false,int)],
NONE,
   CallExp(do_nothing1,[
    VarExp(
     SimpleVar(d)),
    StringExp("str")]))]],
 SeqExp[
  CallExp(do_nothing1,[
   IntExp(0),
   StringExp("str2")])])
LetExp([
 TypeDec[
  (intlist,
   RecordTy[
    (hd,false,int),
    (tl,false,intlist)]),
  (tree,
   RecordTy[
    (key,false,int),
    (children,false,treelist)]),
  (treelist,
   RecordTy[
    (hd,false,tree),
    (tl,false,treelist)])],
 VarDec(lis,false,SOME(intlist),
  RecordExp(intlist,[

   (hd,
    IntExp(0)),
   (tl,
    NilExp)]))],
 SeqExp[
  VarExp(
   SimpleVar(lis))])
LetExp([
 FunctionDec[
  (nfactor,[
   (n,false,int)],
SOME(int),
   IfExp(
    OpExp(EqOp,
     VarExp(
      SimpleVar(n)),
     IntExp(0)),
    IntExp(1),
    OpExp(TimesOp,
     VarExp(
      SimpleVar(n)),
     CallExp(nfactor,[
      OpExp(MinusOp,
       VarExp(
        SimpleVar(n)),
       IntExp(1))]))))]],
 SeqExp[
  CallExp(nfactor,[
   IntExp(10)])])
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,false,string),
    (age,false,int)])],
 VarDec(rec1,false,SOME(rectype),
  RecordExp(rectype,[

   (name,
    StringExp("Nobody")),
   (age,
    IntExp(1000))]))],
 SeqExp[
  AssignExp(
   FieldVar(
    SimpleVar(rec1),
    name),
   StringExp("Somebody")),
  VarExp(
   SimpleVar(rec1))])
LetExp([
 TypeDec[
  (myint,
   NameTy(int)),
  (arrtype,
   ArrayTy(myint))],
 VarDec(arr1,false,SOME(arrtype),
  ArrayExp(arrtype,
   IntExp(10),
   IntExp(0)))],
 SeqExp[
  VarExp(
   SimpleVar(arr1))])
val runLoop = fn : int -> int
val x = 0 : int
- 