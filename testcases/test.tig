let    
    type rec = {a: rec, b: int}
    var inst1 := rec {a=nil, b=10}
    var inst2 := rec {a=inst1, b=15}
    var inst3 := rec {a=inst2, b=20}
    var inst4 := rec {a=inst3, b=25}
    type a = c
    type b = string
    type c = int
    function f(a: int, b: int) = a + b
    function g(): int = (f(3, 5); 4)
    type arrty = array of int
    type nestedarr = array of arrty

    var testint := 4 + 5
    var intarr := arrty [5] of 3
    var bigarr := nestedarr [2] of arrty [5] of 3

    var plustest: int := 1 + 2
    var minustest: c := 4 - 3
    var timestest := plustest * minustest
    var divtest := timestest / 5

    type rec2 = {a: int, b: int}

    var teststring := "hello

    world"

in
    teststring;

    intarr[3] * 7;

    inst4.a.b + intarr[3];
    
    break; /*invalid */
    for test := 3 to 5 do break; /* valid */
    while (3 > break) do 4; /* valid */
    while (1) do break; /* valid */
    while (1) do if 4 < 5 then break; /* valid */
    while (1) do if 4 < 5 then 3 else break; /* valid */
    while 1 = 1 do let in break end; /* valid */
    while 1 = 1 do let var x := break in 4 end; /* valid (out interpretation using type system) */
    while 1 do let function test_break() = break in test_break() end /* not valid */ 
end